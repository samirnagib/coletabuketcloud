import mysql.connector

# Conectar ao banco de dados
conexao = mysql.connector.connect(
    host='localhost',       # ou IP do servidor MySQL
    user='seu_usuario',
    password='sua_senha',
    database='nome_do_banco'
)

cursor = conexao.cursor()

# Criar a tabela
comando_criacao = """
CREATE TABLE IF NOT EXISTS nova_tabela (
    id INT AUTO_INCREMENT PRIMARY KEY,
    momento TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    descricao VARCHAR(255),
    valor_inteiro INT
)
"""
cursor.execute(comando_criacao)

# Inserir um registro
comando_insercao = """
INSERT INTO nova_tabela (descricao, valor_inteiro)
VALUES (%s, %s)
"""
dados = ("Exemplo de texto", 42)
cursor.execute(comando_insercao, dados)

# Confirmar a inser√ß√£o no banco
conexao.commit()

# Encerrar conex√µes
cursor.close()
conexao.close()

import mysql.connector

# Conectar ao banco de dados
conexao = mysql.connector.connect(
    host='localhost',
    user='seu_usuario',
    password='sua_senha',
    database='nome_do_banco'
)

cursor = conexao.cursor()

# Inser√ß√µes m√∫ltiplas
comando = """
INSERT INTO nova_tabela (descricao, valor_inteiro)
VALUES (%s, %s)
"""

dados = [
    ("Temperatura ambiente", 23),
    ("Leitura sensor A", 45),
    ("Evento cr√≠tico", 99),
    ("Modo standby", 12)
]

cursor.executemany(comando, dados)
conexao.commit()

print(f"{cursor.rowcount} registros inseridos com sucesso.")

cursor.close()
conexao.close()


import sys

# sys.argv √© uma lista onde o primeiro elemento √© o nome do script
# e os demais s√£o os argumentos passados
print("Nome do script:", sys.argv[0])
print("Argumentos:", sys.argv[1:])


Em Python, voc√™ pode escrever scripts que aceitam par√¢metros ao serem chamados no sistema operacional usando o m√≥dulo `sys` ou `argparse`. Aqui est√£o alguns exemplos:

---

### 1. Usando `sys.argv` (Simples e direto)
O m√≥dulo `sys` permite acessar os argumentos passados ao script.

```python
import sys

# Os argumentos come√ßam a partir do √≠ndice 1 (√≠ndice 0 √© o nome do script)
if len(sys.argv) > 1:
    print("Par√¢metros recebidos:", sys.argv[1:])
else:
    print("Nenhum par√¢metro foi passado.")
```

**Como executar no terminal:**
```sh
python meu_script.py argumento1 argumento2 argumento3
```

**Sa√≠da esperada:**
```
Par√¢metros recebidos: ['argumento1', 'argumento2', 'argumento3']
```

---

### 2. Usando `argparse` (Mais robusto e organizado)
O m√≥dulo `argparse` permite definir par√¢metros opcionais e obrigat√≥rios.

```python
import argparse

# Criando um parser
parser = argparse.ArgumentParser(description="Script que recebe par√¢metros.")

# Adicionando argumentos
parser.add_argument("nome", type=str, help="Seu nome")
parser.add_argument("idade", type=int, help="Sua idade")
parser.add_argument("--cidade", type=str, default="Desconhecida", help="Cidade onde mora (opcional)")

# Parseando os argumentos
args = parser.parse_args()

# Exibindo os valores
print(f"Nome: {args.nome}")
print(f"Idade: {args.idade}")
print(f"Cidade: {args.cidade}")
```

**Como executar no terminal:**
```sh
python meu_script.py Samir 30 --cidade "Rio de Janeiro"
```

**Sa√≠da esperada:**
```
Nome: Samir
Idade: 30
Cidade: Rio de Janeiro
```

---

### 3. Usando `argparse` para m√∫ltiplos valores
Se quiser passar m√∫ltiplos valores para um √∫nico argumento, use `nargs='+'`.

```python
import argparse

parser = argparse.ArgumentParser(description="Recebe m√∫ltiplos valores.")
parser.add_argument("numeros", type=int, nargs="+", help="Lista de n√∫meros")

args = parser.parse_args()

print(f"N√∫meros recebidos: {args.numeros}")
print(f"Soma dos n√∫meros: {sum(args.numeros)}")
```

**Como executar no terminal:**
```sh
python meu_script.py 10 20 30 40
```

**Sa√≠da esperada:**
```
N√∫meros recebidos: [10, 20, 30, 40]
Soma dos n√∫meros: 100
```

---

Esses m√©todos permitem que voc√™ passe par√¢metros ao chamar o script no sistema operacional. O `argparse` √© mais recomendado para scripts mais complexos, pois oferece valida√ß√£o e ajuda autom√°tica.

Qual desses m√©todos voc√™ acha mais √∫til para o seu caso? üòä
